const e="\nconst pos: array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n  vec2<f32>(0.0, 0.5),\n  vec2<f32>(-0.5, -0.5),\n  vec2<f32>(0.5, -0.5)\n);\n\n[[builtin(position)]] var<out> Position: vec4<f32>;\n[[builtin(vertex_index)]] var<in> VertexIndex: i32;\n\n[[stage(vertex)]]\nfn main() -> void {\n  Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return;\n}\n",n="\n[[location(0)]] var<out> outColor: vec4<f32>;\n\n[[stage(fragment)]]\nfn main() -> void {\n  outColor = vec4<f32>(1.0, 0.2, 0.4, 1.0);\n  return;\n}\n",t=async t=>{const r=await navigator.gpu.requestAdapter(),a=await r.requestDevice(),o="bgra8unorm",i=t.getContext("gpupresent").configureSwapChain({device:a,format:o}),c=a.createRenderPipeline({vertex:{module:a.createShaderModule({code:e}),entryPoint:"main"},fragment:{module:a.createShaderModule({code:n}),entryPoint:"main",targets:[{format:o}]},primitive:{topology:"triangle-list"}}),s=a.createCommandEncoder(),d={colorAttachments:[{view:i.getCurrentTexture().createView(),loadValue:{r:0,g:0,b:0,a:1}}]},u=s.beginRenderPass(d);u.setPipeline(c),u.draw(3,1,0,0),u.endPass(),a.queue.submit([s.finish()])},r="\n这是案例01，三角形的介绍文字。\nTODO\n",a=`const canvas = document.getElementById('gpuweb')\n\nconst vertexShaderSource = \`${e}\`\n\nconst fragmentShaderSource = \`${n}\`\n\nasync function render() {\n  /* 初始化，请求适配器、设备、上下文等 */\n  const adapter = await navigator.gpu.requestAdapter()\n  const device = await adapter.requestDevice()\n\n  const context = canvas.getContext('gpupresent')\n  const swapChainFormat = "bgra8unorm"\n  const swapChain = context.configureSwapChain({\n    device,\n    format: swapChainFormat\n  })\n\n  /* 组装渲染管线 */\n  const pipeline = device.createRenderPipeline({\n    vertex: {\n      module: device.createShaderModule({\n        code: vertexShaderSource\n      }),\n      entryPoint: 'main',\n    },\n    fragment: {\n      module: device.createShaderModule({\n        code: fragmentShaderSource\n      }),\n      entryPoint: 'main',\n      targets: [\n        {\n          format: swapChainFormat\n        }\n      ]\n    },\n    primitive: {\n      topology: 'triangle-list',\n    }\n  })\n\n  /* 创建命令编码器 */\n  const commandEncoder = device.createCommandEncoder()\n  const textureView = swapChain.getCurrentTexture().createView()\n  const renderPassDescriptor = {\n    colorAttachments: [\n      {\n        view: textureView,\n        loadValue: {\n          r: 0.0,\n          g: 0.0,\n          b: 0.0,\n          a: 1.0\n        }\n      }\n    ]\n  }\n\n  /* 使用命令编码器创建渲染通道 */\n  const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor)\n  passEncoder.setPipeline(pipeline)\n  passEncoder.draw(3, 1, 0, 0)\n  passEncoder.endPass()\n\n  /* 向设备中的队列发送命令编码 */\n  device.queue.submit([commandEncoder.finish()])\n}\n\nrender()\n`;export{r as descText,t as init,a as javascriptCode};
